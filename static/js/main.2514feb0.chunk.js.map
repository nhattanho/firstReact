{"version":3,"sources":["logo.svg","components/card/cardshow.jsx","components/card-list/cardlist.jsx","components/search/searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","bind","even","this","setState","target","value","fetch","then","res","json","users","console","log","catch","err","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,kC,2LCG9BC,G,wBAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,gBACtB,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,MAAnB,QCFCC,EAAW,SAACR,GAErB,OACI,yBAAKC,UAAU,YACVD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACvB,kBAAC,EAAD,CAAMO,IAAG,UAAKP,EAAQC,IAAMD,QAASA,GAArC,UCNJQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6JHG,E,4MA5FbC,MAAQ,CACNT,SAAU,GACVU,YAAa,I,EA6BfL,aAAe,EAAKA,aAAaM,KAAlB,gB,2DACFC,GACX,OAAOC,KAAKC,SAAS,CAACJ,YAAaE,EAAKG,OAAOC,U,0CAI5B,IAAD,OAClBC,MAAM,6CACLC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKP,SAAS,CAACd,SAAUqB,OAE1BG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,Q,+BAIN,IAAD,EAC0BZ,KAAKJ,MAA/BT,EADA,EACAA,SAAUU,EADV,EACUA,YACXgB,EAAiB1B,EAAS2B,QAAQ,SAAAhC,GACtC,OAAOA,EAAQE,KAAK+B,cAAcC,SAASnB,EAAYkB,kBAKzD,OACE,yBAAKpC,UAAU,OACb,8CACA,kBAAC,EAAD,CACEY,YAAY,iBASZC,aAAcQ,KAAKR,eASrB,kBAAC,EAAD,CAAUL,SAAU0B,S,GAnFVI,aC9DEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.2514feb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}/?set=set3`}/>\r\n            <h2> {props.monster.name} </h2>\r\n            <p> {props.monster.email} </p>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport './cardlist.style.css';\r\nimport { Card } from '../card/cardshow';\r\n\r\n//props is an object containing all properties which was passed in the CardList function\r\n//==> all properties are likely the methods of props object\r\nexport const CardList = (props) => {\r\n    //console.log(props);\r\n    return (\r\n        <div className='cardlist'> \r\n            {props.monsters.map( monster => \r\n                (<Card key={`${monster.id}`} monster={monster}> </Card>)\r\n            )} \r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport './searchbox.style.css'\r\n\r\n//props is an object so if we pass directly the argument into module likes below, we have to put them\r\n// inside {}\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  \r\n    <input \r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}/>\r\n);\r\n\r\n/* the same code as below\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return (\r\n        <input \r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}/>\r\n    )\r\n};\r\n*/\r\n/* The code below also the same as above\r\nexport const SearchBox = (props) => (\r\n  \r\n    <input \r\n        className='search' \r\n        type='search' \r\n        placeholder={props.placeholder} \r\n        onChange={props.handleChange}/>\r\n);\r\n*/\r\n    \r\n\r\n","import React, {Component} from 'react'; //it is library supporting to write the html in javascript <=> JSX\nimport logo from './logo.svg'; // logo just likes a variable\nimport './App.css';\nimport { CardList } from './components/card-list/cardlist'\nimport { SearchBox } from './components/search/searchbox'\n\n/*******************************The first way to do App.js****************************************/\n//JSX\n// class App extends Component { // class App extends React.Component {}\n// /*\n//   state = {\n//     monsters: [\n//       {\n//         name: 'Number 1',\n//         id: 1\n//       },\n//       {\n//         name: 'Number 2',\n//         id: 2\n//       },\n//       {\n//         name: 'Number 3',\n//         id: 3\n//       }\n//     ]\n//   };\n// */\n//   state = {\n//     monsters: [],\n//     searchField: ''\n//   }\n\n//   // life cycle component\n//   componentDidMount() {\n//     fetch('http://jsonplaceholder.typicode.com/users')\n//     .then(res => {\n//       return res.json();\n//     })\n//     .then(users => {\n//       console.log(users); //user is an array of objects\n//       this.setState({monsters: users});//=> monsters is an array objects\n//     })\n//     .catch(err => {\n//       console.log(err);\n//     });\n//   }\n\n//   render() {\n//     const {monsters, searchField } = this.state;\n//     const filterMonsters = monsters.filter( monster => {\n//       return monster.name.toLowerCase().includes(searchField.toLowerCase()); // return an array contains all elements satisfying the include method \n//     });//in the first time, the searchField = '', so the filterMonsters = this.state.monsters;\n//     return (\n//       <div className=\"App\"> \n\n//         <SearchBox \n//           placeholder='search monster' \n//           handleChange={ e => this.setState({searchField: e.target.value}) }\n//         />\n\n//         <CardList monsters={filterMonsters}></CardList>\n//         {/*\n//           this.state.monsters.map( monster => \n//             (<h1 key={monster.id}> {monster.name} </h1>)\n//           )\n//           //this.state.monsters.map(curr => curr.name)\n//           */}\n//     </div>\n//     )\n//   }\n// }\n// export default App;\n\n/*******************************The second way to do App.js************************************/\nclass App extends Component { // class App extends React.Component {}\n\n  state = {\n    monsters: [],\n    searchField: ''\n  }\n\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     monsters: [],\n  //     searchField: ''\n  //   };\n  // }\n  \n  //ES7 but don't use arrow function\n  // handleChange = function(even) {\n  //   return this.setState({searchField: even.target.value});\n  // }.bind(this);\n\n  //ES7 but don't use arrow function\n  // handleChange = function(even) {\n  //   console.log(this);\n  //   return this.setState({searchField: even.target.value});\n  // };\n  \n  // //ES7 and use arrow function\n  // handleChange = even => {\n  //     return this.setState({searchField: even.target.value});\n  // }\n\n  //ES6\n\n  handleChange = this.handleChange.bind(this); //only add this line when we use: handleChange={this.handleChange}\n  handleChange(even) {\n    return this.setState({searchField: even.target.value});\n  }\n\n  // life cycle component\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then(res => {\n      return res.json();\n    })\n    .then(users => {\n      console.log(users); //user is an array of objects\n      this.setState({monsters: users});//=> monsters is an array objects\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const {monsters, searchField } = this.state;\n    const filterMonsters = monsters.filter( monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase()); // return an array contains all elements satisfying the include method \n    });//in the first time, the searchField = '', so the filterMonsters = this.state.monsters;\n    // console.log('**********************start***************************');\n    // console.log(this);\n    // console.log('***********************end***************************');\n    return (\n      <div className=\"App\"> \n        <h1> My First App </h1>\n        <SearchBox \n          placeholder='search monster' \n          \n          \n          //handleChange={ e => this.handleChange(e) } //just only an assignment, not declaration or expression\n         \n          // handleChange={ e => {\n          //   console.log(this);\n          //   return this.handleChange(e);}}\n          \n          handleChange={this.handleChange}\n\n          //if we don't want to use arrow function, we have to use bind method to pass exactly the this object, not for this<=>window object\n          // handleChange={function(e){\n          //   console.log('honhattan');\n          //   return this.handleChange(e); // this is a object of function, and this function is not a method of class ==> it is window object\n          // }.bind(this)}// bind to get this of an object of class \n        />\n\n        <CardList monsters={filterMonsters}></CardList>\n        {/* just save for reference\n          this.state.monsters.map( monster => \n            (<h1 key={monster.id}> {monster.name} </h1>)\n          )\n          //this.state.monsters.map(curr => curr.name)\n          */}\n    </div>\n    )\n  }\n}\nexport default App;\n\n/*\n1/////////////////////////////////////////////////////////////////\nES7 and use arrow function\nhandleChange = even => {\n      return this.setState({searchField: even.target.value});\n    }\n\nhandleChange={this.handleChange}\n/////////////////////////////////////////////////////////////////\n\n2/////////////////////////////////////////////////////////////////\n  //ES7 but don't use arrow function\n  handleChange = function(even) {\n    return this.setState({searchField: even.target.value});\n  }.bind(this);\n\n  handleChange={this.handleChange}\n/////////////////////////////////////////////////////////////////\n\n3/////////////////////////////////////////////////////////////////\n//ES7 but don't use arrow function\n  handleChange = function(even) {\n    return this.setState({searchField: even.target.value});\n  }\n\n  handleChange={ e => this.handleChange(e) }\n/////////////////////////////////////////////////////////////////\n\n4/////////////////////////////////////////////////////////////////\n  //ES7 but don't use arrow function\n  handleChange = function(even) {\n    return this.setState({searchField: even.target.value});\n  }\n\n  handleChange={function(e){\n    return this.handleChange(e); // this is a object of function, and this function is not a method of class ==> it is window object\n  }.bind(this)}// bind to get this of an object of class \n/////////////////////////////////////////////////////////////////\n\n5/////////////////////////////////////////////////////////////////\n  handleChange = even => {\n      return this.setState({searchField: even.target.value});\n  }\n\n  handleChange={function(e){\n    return this.handleChange(e); // this is a object of function, and this function is not a method of class ==> it is window object\n  }.bind(this)}\n/////////////////////////////////////////////////////////////////\n\n6/////////////////////////////////////////////////////////////////\n  handleChange = even => {\n      return this.setState({searchField: even.target.value});\n  }\n\n  handleChange={ e => this.handleChange(e) }\n  /////////////////////////////////////////////////////////////////\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}