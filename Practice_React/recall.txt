+ React likes an external library of JS which using new featurs of JS called ES6

+ React-dom is a rendering to convert components in React to a real DOM or insert the code into html file
import ReactDOM from 'react-dom';
ReactDOM.render(app, document.querySelector('#app')); // checking in the index.htm where the element
//having the id is app and insert this part by function app which has been rendered already.

+ import React from 'react'; //it is library supporting to write the xml in javascript <=> JSX

+ Babel is a JS pre-processor to compile the code of React/JSX to real JS code which can run successfully on all Browsers

+ES6 Modules helps us separate the project to several files/modules ==> easier to manage and mantain the code
==> However, the problem is browsers do not really support this features, so we have to bundle these modules
become a single file ==> using Webpack to bundle modules.

+ "react-scripts": "3.4.1" //Don't worry about Webpack and babel

+ "start": "react-scripts start",
  "build": "react-scripts build", ==> all code from source folder will be build and located in build folder used by Browsers
  "test": "react-scripts test",
  "eject": "react-scripts eject" ==> take out all of file hidden from us included scripts and config folder

+ Public folder: all files where the Browser needs

+ Src folder: the code of application 

+ Package.json: save all information of Application

+ <p>{this.state.string}<code>src/App.js</code> and save to reload.</p> ==> in xml, using {}, we can write
JS inside it

+ In xml: <header className="App-header"> | <button onClick={()=>{ this.setState({string: 'honhattan'})}}>Change</button>
In html: <header class="App-header">    |   <button onclick={()=>{ this.setState({string: 'honhattan'})}}>Change</button>

+ import React, {Component} from 'react' ==> class App extends Component {}
Or import React from 'react' ==> class App extends React.Component {}

+ In XML: combine Js and html==> if we want to add js code, it has to be in {}, and for html, html's code
has to be in (). If we use {}, and inside is not a js => syntax error. Example:
export const CardList = (props) => {
    (
        <div className='cardlist'> 
            {props.monsters.map( ele => 
                (<h1>{ele.name}</h1>)
            )} 
        </div>
    )
};
==> wrong, because inside{} is a () which used for html, so the right code has to be:
export const CardList = (props) => {
    return ( //==>return is a command in js
        <div className='cardlist'> 
            {props.monsters.map( ele => 
                (<h1>{ele.name}</h1>)
            )} 
        </div>
    );
};

==> Or we can use the new feature of ES6 like:
export const CardList = (props) =>
    ( //==>return is a command in js
        <div className='cardlist'> 
            {props.monsters.map( ele => 
                (<h1>{ele.name}</h1>)
            )} 
        </div>
    );
}; // it automatically return a value which in this case is a (html)

Besides, if we starting with (), then inside the() has to be started with the html first. If it starts
with js in () ==> must have error. Example:
export const CardList = (props) =>
    ( 
        {console.log('nhattan')} ==> wrong, because in (), has to be started with html first
        <div className='cardlist'> 
            {props.monsters.map( ele => 
                (<h1>{ele.name}</h1>)
            )} 
        </div>
    );
}; 

==> fix:

export const CardList = (props) => {
    console.log('nhattan');
    return ( //==>return is a command in js
        <div className='cardlist'>  // inside a () is a div....
            {props.monsters.map( ele => 
                (<h1>{ele.name}</h1>)
            )} 
        </div>
    );
}; 


+ Each props should have an unique key, example:
<Card key={monster.id} monster={monster.name}> </Card>

+ We have the example of designer's graph in React:

                     App.js - Parent Node
                        /       \
                       /         \
                    CardList    SearchBox
                      /            \      \
                     /              \      \
                  Child3          Child4   Child5

As we can see, the Parent Node is a key of the tree, so the state should only stay on the App.js;
it shouldn't be passed as an argument into other Child modules or functions. If the state located
on the Parent Node, every time it was changed, the system from the parent node will update
information for all child Nodes. However, for example, the state located on the Search Box,
so the changing of it just only affects its ChildNode like Child4 and Child5, and of course,
this change was not updated for all the systems. This has to be prevented in the React system.
Therefore, the state has to be located in the root of the tree all the time.

+ In React, in render part, we just refer the method whenever the event apprears instead of calling it
directly. (This also was mentioned in section 6 of Practice_Javascript) Example:
1/////////////////////////////////////////////////////////////////
ES7 and use arrow function
handleChange = even => {
      return this.setState({searchField: even.target.value});
    }

handleChange={this.handleChange} // this is refer the event
/////////////////////////////////////////////////////////////////

2/////////////////////////////////////////////////////////////////
  //ES7 but don't use arrow function
  handleChange = function(even) {
    return this.setState({searchField: even.target.value});
  }.bind(this);

  handleChange={this.handleChange}
/////////////////////////////////////////////////////////////////

We shouldn't do:
3/////////////////////////////////////////////////////////////////
//ES7 but don't use arrow function
  handleChange = function(even) {
    return this.setState({searchField: even.target.value});
  }

  handleChange={ e => this.handleChange(e) } // we are calling directly a method function
/////////////////////////////////////////////////////////////////

4/////////////////////////////////////////////////////////////////
  //ES7 but don't use arrow function
  handleChange = function(even) {
    return this.setState({searchField: even.target.value});
  }

  handleChange={function(e){
    return this.handleChange(e); // this is a object of function, and this function is not a method of class ==> it is window object
  }.bind(this)}// bind to get this of an object of class 
/////////////////////////////////////////////////////////////////

5/////////////////////////////////////////////////////////////////
  handleChange = even => {
      return this.setState({searchField: even.target.value});
  }

  handleChange={function(e){
    return this.handleChange(e); // this is a object of function, and this function is not a method of class ==> it is window object
  }.bind(this)}
/////////////////////////////////////////////////////////////////

6/////////////////////////////////////////////////////////////////
  handleChange = even => {
      return this.setState({searchField: even.target.value});
  }

  handleChange={ e => this.handleChange(e) }
  /////////////////////////////////////////////////////////////////
*/

+ Somthing about Lifecycle Methods (look back to 4.life-cycle)

+ The difference between using the function and the class in React
- When we want to create a component in React that we don't need to manage or access to its lifecyle Methods, 
we should use the function components. It's easier to use, write, and read. However, if we actually want to access
to behind the scene to get more powerfull to control the flow of app's artchitecure, we can use class component
instead of function. We can reference the section 2.first-app for function handling or section 4.life-cycle for
using class components.

+ THE CODE BEFORE SEPARATE THE HOMEPAGE.JSX
export const HomePage = () => (
    <div className='homepage'>
    <h1>Welcome to my HomePage</h1>
        <div className='directory-menu'>
            <div className='menu-item'> 
                <div className='content'>
                    <h1 className='title'>HATS</h1>
                    <span className='subtitle'>SHOP NOW</span>
                </div>
            </div>

            <div className='menu-item'> 
                <div className='content'>
                    <h1 className='title'>JACKETS</h1>
                    <span className='subtitle'>SHOP NOW</span>
                </div>
            </div>

            <div className='menu-item'> 
                <div className='content'>
                    <h1 className='title'>SNEAKERS</h1>
                    <span className='subtitle'>SHOP NOW</span>
                </div>
            </div>

            <div className='menu-item'> 
                <div className='content'>
                    <h1 className='title'>WOMENS</h1>
                    <span className='subtitle'>SHOP NOW</span>
                </div>
            </div>

            <div className='menu-item'> 
                <div className='content'>
                    <h1 className='title'>MENS</h1>
                    <span className='subtitle'>SHOP NOW</span>
                </div>
            </div>
        </div>
    </div>
);

+ Understand about the input of components:
Example we have MenuItem component.
 <MenuItem key={id} title={title} imageUrl={imageUrl} size={size} linkUrl={linkUrl}></MenuItem>
 ==>everything we passed into MenuItem will be used for match method of MenuItem. Because match
 and history are default method of any component. History contains some functions while match can 
 used all properties we pass directly into its components like title, key, size, imageUrl, ...vv
 
 So, actually in the MenuItem, we can do:

 const MenuItem = ({title, imageUrl, size, history, match}) => ( // object props now includes {title.....}
    <div  
        className={ `menu-item ${size}` } // <=> {size + 'menu-item'}
        onClick={ () => history.push(`${match.url}${imageUrl}`) }  //url is a original path was passed into previous components
    > 
        <div 
            style={ // use for js
                { //use for object
                    backgroundImage: `url(${imageUrl})` // <=> 'url(' + imageUrl + ')'
                }
                }  
            className='background-image'
        />

        <div className='content'>
            <h1 className='title'>{title.toUpperCase()}</h1>
            <span className='subtitle'>SHOP NOW</span>
        </div>
    </div>
);